CSS教程文档版
CSS介绍
        网页分为三个部分
            结构(html)
            表现(css)
            行为(javascript)
        CSS
            -层叠样式表
            -网页实际上是一个多层的结构，通过CSS可以分别为网页的每一层设置样式
               而最终我们能看到只是网页的最上面一层
            -总之一句话，CSS用来设置网页中元素的样式

 一、使用CSS修改元素的样式
     第一种方式(内联样式，行内样式):
        -在标签内部通过style的html标签属性来设置元素的样式
        -问题:
           使用内联样式，样式只能对一个标签生效，
               如果希望影响到多个元素必须在每一个元素中都复制一遍
               并且当样式发生变化时，我们必须要一个一个地修改，非常的不方便
        -开发时绝对不要使用内联样式
示例:<p style="color:red; font-size:20px;">你妈死了</p>
注：px是一个单位，意思是像素
     第二种方式(内部样式表):
          -将样式编写到head中的style标签里
            然后通过CSS的选择器来选中元素并为其设置各种样式
            可以通过为多个标签设置样式，并且修改时只需要修改一处即可全部应用
          -内部样式表更加方便对样式进行复用
          -问题:
             我们的内部样式表只能对一个网页起作用，
                 他里面的样式不能跨页面进行复用
示例:<style>
       P{
         color:red; 
         font-size:30px;
        }
    </style>
    <p>ychsb</p>
p表示页面中的p元素，{}表示设置p元素的样式
     第三种方式(外部样式表)  最佳实践
          -可以将CSS样式编写到一个外部的css文件中,
             然后通过link标签来引入外部的css文件
          -外部样式表需要通过link标签引用，
             意味着只要想使用这些样式的网页都可以对其进行应用
             使样式可以在不同页面之间进行复用
          -将样式编写到外部CSS文件中，可以使用到浏览器的缓存机制，
             从而加快网页的加载速度，提高用户的体验。


示例:<head>
         <link rel="stylesheet" href="./示例.css">
    </head>

       示例.css
     P{
       color:red; 
       font-size:30px;
     }
 
二、CSS语法
    1、CSS注释
       CSS中的注释，注释中的内容会自动被浏览器所忽略
格式:/*
    注释内容
    */
    2、CSS的基本语法:
            选择器 声明块
            选择器，通过选择器可以选中页面中的指定元素
                比如p的作用就是选中页面中所有的p元素
            声明块，通过声明块来指定要为元素设置的样式
                声明块由一个一个的声明组成
                生命是一个名值对结构
                    一个样式名对应一个样式值，名和值之间以:连接，以;结尾
示例:<style>
    p{
      color=red;
    }
    </style>

三、CSS选择器(所有实例都只是部分代码)
  1、常用选择器
     ①元素选择器
           作用:根据标签名来选中指定的元素
           语法:标签名{}
           例子:p{} h1{} div{}
实例:将ychsb设置成红色(字体) 
     <style>
     p{
       color:red;
     }
     </style>
     <p>ychsb</p>
     
     ②ID选择器
           作用:根据元素的id属性值选中一个元素
           语法:#id{属性值}
           例子:#red{} #box{}
实例:将ych爸爸变成红色
     <style>
     #red{
          color:red;
     }
     </style>
     <p>我是</p>
     <p id="red">ych爸爸</p>
     
     ③类选择器(class选择器)
           作用:根据元素的class属性值选中一组元素
           语法:  .class属性值{}
     class是一个标签属性，它和id类似，不同的是class可以重复使用
        可以通过class属性为元素分组
        可以同时为一个元素指定对个class属性
示例:<p class="ych sb">ychsb</p>
     意味着ychsb有两个class，分别是ych和sb class属性
实例:把ych和sb都变成红色
     <style>
     .sb{
        color:red
     }
     </style>
     <p class="sb">ych</p>
     <p class="sb">sb </p> 

     ④通配选择器
           作用:选中页面中的所有元素
           语法: *{}
实例:把ych和sb都变成红色
     <style>
     *{
      color:red
     }
     </style>
     <p>ych</p>
     <p>sb</p>

  2、复合选择器
     ①交集选择器
           作用:选中同时复合多个条件的元素
           语法:选择器1选择器2选择器3选择器n{}
           注意点:
               交集选择器中如果有元素选择器，必须使用元素选择器开头
               示例:若要指定一个既是div标签，class属性又是ych的元素，那么应该是div.ych,而不能是.ychdiv
实例:将class属性为ych的div标签颜色设置为red，字体大小设置为20px
     <style>  
     div.ych{
            color:red;
            font-size:20px;
            }
     </style>
     <div class="ych">我是傻逼</div>

     ②选择器分组(并集选择器)
           作用:同时选择多个选择器对应的元素
           语法:选择器1,选择器2,选择器3，选择器n{}
           注意点:
                 选择器之间必须要
实例:将所有h1标签和，p标签,class属性是red,class属性是ych的p标签中ych和sb的颜色都设置为red
     <style>
     h1,p,.red,p.ych{
         color:red
         }
     </style>
     <h1 class="red">YCH</h1>
     <p class="ych">sb</p>

  3、关系选择器
     元素之间的关系
                   父元素
                        -直接包含子元素的元素叫做父元素
                   子元素
                        -直接被父元素包含的元素是子元素
                   祖先元素
                        -直接或间接包含后代元素的元素叫做祖先元素
                        -一个元素的父元素也是它的祖先元素
                   后代元素
                        -直接或间接被祖先元素包含的元素叫做后代元素
                        -子元素也是后代元素
                   兄弟元素
                        -拥有相同父元素的元素是兄弟元素
     ①子元素选择器
           作用:选中指定父元素的指定子元素
           语法:父元素>子元素{}
实例:设置父元素p标签中的我是ych爸爸内的子元素span标签中的我是lws儿子的字体颜色为红色
     <style>
     p>span{
            color:red
     }
     </style>
     <p>我是ych爸爸
     <span>
     我是lws儿子
     </span>
     <p>
     
     ②后代元素选择器
           作用:选中指定元素内的指定后代元素
           语法:祖先 后代{}
实例:设置div标签lws是中的p标签ych中的后代元素span标签的爸爸为红色
     <style>
     div span{
            color:red
     }
     </style>
     <div>
     lws是
     <p>
     ych
     <span>
     的爸爸
     </span>
     </p>
     </div>

     ③兄弟元素选择器
        1.选择下一个兄弟
           语法:前一个+下一个{}
实例:选择div标签中的p标签中lws下一个span标签中ych字体变成红色
     <style>
     p+span{
            color:red}
     </style>
     <div>
     <p>
     lws
     </p>
     <span>
     ych
     </span>
     </div>
        2.选择下边所有的兄弟
            语法:兄~弟{}
实例:选择div中所有p标签中的lws下面的span标签中的ych变成红色
     <style>
     p~span{
            color:red}
     </style>
     <div>
     <p>lws
     </p>
     <span>ych
     </span>
     <span>ych
     </span>
     </div>

  4、属性选择器
     ①选择含有指定属性的元素
           格式:[属性名]{}
实例:我是和大傻逼都会变成红色，div内的不会变
     <style>
     [title]{color:red}</style>
     <div>我不会变成红色，因为我没有title属性</div>
     <p title="red">我是</p><span title="green">大傻逼</span>
     ②选择含有指定属性和属性值的元素
           格式[属性名=属性值]{}
实例:ych会变成红色，sb不变
     <style>[title=sb]{color:red}</style>
     <p title=sb>ych</p><p>sb</p>
     ③选择属性值以指定值开头的元素
           格式:[属性名^=属性值]
实例:我会变红，是会变红，傻逼不会变红
     <style>[title^=sb]{color:red}</style>
     <p title="sb">我</p><p title="sbych">是</p><p title="smysb">傻逼</p>
     ④选择属性值以指定值结尾的元素
           格式[属性名$=属性值]
实例:我会变红，是不会变红，傻逼会变红
     <style>[title$=sb]{color:red}</style>
     <p title="sb">我</p><p title="sbych">是</p><p title="smysb">傻逼</p>
     ⑤选择属性值中含有某值的元素
           格式[属性名*=属性值]
实例:我会变红，是会变红，傻逼会变红
     <style>[title*=sb]{color:red}</style>
     <p title="sb">我</p><p title="sbych">是</p><p title="smysb">傻逼</p>

  5、伪类选择器
     伪类(不存在的类，特殊的类)
         -伪类用来描述一个元素的特殊状态
           比如:第一个子元素、被点击的元素、鼠标移入的元素...
         -伪类一般情况下都是使用:开头
            :first-child 表示第一个子元素
            :last-child 表示最后一个子元素
            :nth-child(n) 选中第n个子元素
               特殊值:
                    n的范围是0~+∞
                    2n或even 表示选中偶数位的元素
                    2n+1或odd 表示选中奇数位的元素
               -以上这些伪类都是根据所有的子元素进行排序
            :first-of-type
            :last-of-type
            :nth-of-type()
               -这几个伪类的功能和上述的类似，不同点是他们是在同类型元素中进行排序
            :not() 否定伪类
              -将符合条件的元素从选择器中去除
实例:只会选择第一个ul的子元素我变成红色
     <style>ul>li:first-child{color:red}</style>
     <ul><li>我</li>
        <li>是</li>
        <li>你</li>
        <li>爸</li>
  a元素的伪类
        1.没有访问过的链接
        2.访问过的链接
     :link用来表示没访问过的链接(正常的链接)
     :visited 用来表示访问过的链接
     由于隐私的原因，所以visited这个伪类只能修改链接的颜色
实例:a:link{color:green;}
没访问过的链接是绿色
     a:visited{color:red};
访问过的链接颜色是红色
        :hover  用来表示鼠标移入的状态
示例:a:hover{color:red}
鼠标移到超链接上就变红
        :activ 用来表示鼠标点击的状态
示例:a:activ{color:red}
点击后超链接变红
         :focus  元素获取到焦点时触发
         :root  根元素选择器
         :target 元素通过a标签跳转到这个标签时生效

  6、伪元素选择器
     伪元素，表示页面中一些特殊的并不真实的存在的元素(特殊位置)
         伪元素使用 : : 开头   
         ::first-letter  表示第一个字母
         ::first-line  表示第一行
         ::selection  表示选中的内容
         ::before   表示元素的开始位置
         ::after     表示元素的最后位置
         ::selection  选择用户鼠标选中的部分（指鼠标拖拽选择的部分）
            ━before和after必须结合content属性来使用
示例:<style>div::before{content:'我是你爸';}
    <div>个屁</div>
这样可以在 > 与 个 之间添加文字 我是你爸
意义：content的意思是内容
示例:p::first-letter{font-size:50px}
    <p>我是爸爸</p>
只会有第一个字"我"会变成50px大，如果是::first-line则我是爸爸都会变成50px大
拓展CSS代码： background-color:  表示背景颜色

四、CSS基础知识
     样式的继承，我们为一个元素设置的样式同时也会应用到它的后代元素上
     继承是发生在祖先和后代之间的
     继承的设计是为了方便我们的开发，
         利用继承我们可以将一些通用的样式统一设置到共同的祖先元素上，
             这样只需设置一次即可让所有的元素都具有该样式
     注意：并不是所有的样式都会被继承
         比如：背景相关的，布局相关的等这些样式都不会被继承

   选择器的权重
     样式的冲突
         ━当我们通过不同的选择器，选中相同的元素，并且为相同的样式设置不同的值时，此时就发生了样式的冲突。
     发生样式冲突时，应用那个样式由选择器的权重(优先级)决定
     选择器的权重
         内联样式         1,0,0,0
         id选择器        0,1,0,0
         类和伪类选择器   0,0,1,0
         元素选择器       0,0,0,1
         通配选择器       0,0,0,0
         继承的样式       没有优先级
     比较优先级时，需要将所有的选择器的优先级进行想加计算，最后优先级越高，则越优先显示(分组选择器是单独计算的)
         选择器的累加不会超过其最大的数量级，类选择器再高也不会超过id选择器
     如果优先级计算后相同，此时则优先使用靠下的样式
     可以在某一个样式的后面添加 !important ，则此时该样式会获取到最高的优先级，甚至超过内联样式
         注意：在开发中这玩意一定要慎用
     
     单位
         长度单位:
              像素
                   ━屏幕(显示器)实际上是由一个一个的小点点构成的
                   ━不同屏幕的像素大小是不同的，像素越小的屏幕显示的效果越清晰
                   ━所以同样的200px在不同的设备下显示效果不一样
              百分比
                  ━也可以将属性值设置为相对于其父元素属性的百分比
                  ━设置百分比可以使子元素跟随父元素的改变而改变
              em
                  ━em是相对于元素的字体大小来计算的
                  ━1em=1font-size
                  ━em会根据字体大小的改变而改变
              rem
                  ━rem是相对于根元素的字体大小来计算
              vw
                  ━表示的是视口的宽度，100vw就是一个视口宽度

         颜色单位：
              在CSS中可以直接使用颜色名来设置各种颜色
                    比如：red、orange、yellow、blue、green ... ...
                    但是在CSS中直接使用颜色名是非常的不方便
              RGB值：
                   ━RBG通过三种颜色的不同浓度来调配出不同的颜色
                   ━R red，G green，B blue
                   ━每一种颜色的范围在0-255(0%-100%)之间
                   ━语法:RGB(红色，绿色，蓝色
实例:<style>div{backgroud-color:rgb(255,255,255);}
    <div>我</div>
这样显示的 我 字是白色
              RGBA值:
                     ━就是在rgb基础上增加了一个a表示不透明度
                     ━需要四个，前三个和rgb一样，第四个表示不透明度
                          1表示完全不透明   0表示完全透明   .5表示半透明
              HSL值 HSLA值
                   H 色相(0-360)
                   S 饱和度，颜色的浓度(0%-100%)
                   C 亮度，颜色的亮度(0%-100%)

五、布局
        1、文档流(normal flow)
               ━网页是一个多层的结构，一层落着一层
               ━通过CSS可以分别为每一层来设置样式
               ━作为用户来讲只能看到最顶上一层
               ━这些层中，最底下的一层称为文档流，文档流是网页的基础
                   我们所创建的元素默认都是在文档流中进行排列
               ━对于我们来说元素主要有两个状态
                   在文档流中
                   不在文档流中(脱离文档流)
               ━元素在文档流中有什么特点：
                   ━块元素
                       ━块元素会在页面中独占一行(自上向下垂直排列)
                       ━默认宽度是父元素的全部(会把父元素撑满)
                       ━默认高度是被内容撑开(子元素)的高度 
                   ━行内元素
                       ━行内元素不会独占页面的一行，只占自身的大小
                       ━行内元素在页面中自左向右水平排列，如果一行之中不能容纳下所有的行内元素
                           则元素会换到第二行继续自左向右排列(书写习惯一致)
                       ━行内元素的默认宽度和高度都是被内容撑开
        2、盒子模型(box model)
                 ━CSS将页面中的所有元素都设置为了一个矩形的盒子
                 ━将元素设置为矩形的盒子后，对页面的布局就变成将不同的盒子摆放到不同的位置
                 ━每一个盒子都由以下几个部分组成：
                     内容区(content)
                     内边距(padding)
                     边框(border) 
                     外边距(margin)
            内容区(content)，元素中的所有子元素和文本内容都在内容区中排列
                内容区大小由width和height两个属性来设置
                    width设置内容区的宽度
                    height设置内容区的高度
            边框(border)，边框属于盒子的边缘，边框里边属于盒子内部，出了边框都是盒子的外部
                边框的大小会影响到整个盒子的大小
            要设置边框，需要至少设置三个样式：
                边框的宽度 border-width
                边框的颜色 border-color
                边框的样式 border-style
示例：<style>span{width:50px;height:50px;backgroud-color:red;
      border-width:10px;
      border-color:lime;
      border-style:solid}
      <div>emmm</div>
        
        ①盒子模型-边框
            边框
                  边框的宽度 border-width
                  边框的颜色 border-color
                  边框的样式 border-style
            border-width
            默认值，一般都是3px
            border-width可以用来指定四个方向的边框宽度
                值的情况:
                    四个值:上 右 下 左
                    三个值:上 左右 下
                    两个值:上下 左右
                    一个值:上下左右
            出了border-width还有一组border-xxx-width
                xxx可以是top right bottom left
                用来单独指定某一个边的宽度
            border-color
            border-color用来指定边框的颜色，同样可以分别指定四个边框的颜色
                规则和border-width一样
            border-width也可以省略不写，如果省略不写则自动使用color的颜色
            border-style
            border-style指定边框的样式
                solid 表示实线
                dotted 表示点状虚线
                dashed 表示线状虚线
                double 表示双线
                border-style的默认值是none表示没有边框
        border简写属性，通过该属性可以同时设置边框所有的相关样式，并且没有顺序要求
        除了border以外还有border-xxx
            xx表示top right bottom left
示例：{border:10px red solid}

        ②盒子模型-内边距
                 ━内边距(padding
                 ━一共有四个方向的内边距:
                     padding-top
                     padding-right
                     padding-bottom
                     padding-left
                 ━内边距的设置会影响到盒子大小
                 ━背景颜色会延伸到内边距上
                 ━一共盒子的可见宽大小，由内容区 内边距 和 边框共同决定
                       所以在计算盒子大小时，需要将这三个区域加到一起计算
                 padding内边距的简写属性，可以同时指定四个方向的内边距
示例:
<!docutype html>
<html>
      <head>
            <meat charset="utf-8">
            <title></title>
<style>div{color:red;
padding:10px;}
</style>

      </head>
      <body>
<div></div>
      </body>
</html>
        ③盒子模型-外边距(margin)
                     ━外边距不会影响盒子可见框的大小
                     ━但是外边距会影响盒子的位置
                     ━一共有四个方向的外边距：
                         margin-top
                             ━上外边距，设置一个正值，元素会向下移动
                         margin-right
                             ━默认情况下设置margin-right不会产生任何效果
                         margin-bottom
                             ━下外边距，设置一个正值，其下边元素会向下移动
                         margin-left      
                             ━左外边距，设置一个正值，元素会向右移动   
                         ━margin也可以设置负值，如果是负值则元素会向相反的方向移动
                     ━元素在页面中是按照自左向右的顺序排列的           
                         所以默认情况下如果我们设置的左和上外边距则会移动元素本身
                         而设置下和右外边距则会移动其他元素

                     ━margin的简写属性
                          magin可以同时设置四个方向的外边距，用法和padding一样
                     ━margin会影响到盒子实际占用空间
        ④盒子模型-水平方向的布局
元素的水平方向的布局
    元素在其父元素中的水平方向的位置由以下几个属性共同决定：
        margin-left
        border-left
        padding-left
        width
        padding-right
        border-right
        margin-right
    一个元素在其父元素中，水平布局必须要满足以下等式
margin-left+border-left+padding-left+width+padding-right+border-right+margin-right=其父元素内容区的宽度(必须满足)
    ━以上等式必须满足，如果想加结果使等式不成立，则称为过渡约束，则等式会自动调整
        ━调整的情况：
            ━如果这七个值中没有为auto的情况，则浏览器会自动调整margin-right的值以使等式满足
    ━这七个值中有三个值可以设置成auto
        width(width的值默认就是auto)
        margin-right
        margin-left
        ━如果某个值为auto，则会自动调整为auto的那个值以使等式成立
        ━如果将一个宽度和一个外边距设置为auto，则宽度会调整到最大，设置为auto的外边距会自动为0
        ━如果将三个值都设置为auto，则外边距都是0，宽度最大
        ━如果将两个外边距设置为auto，宽度固定值，则会将外边距设置为相同的值
            所以我们经常利用这个特点来使一个元素在其父元素中水平居中
            示例：
                 width:xxpx;
                 margin:0 auto;
           
             ⑤盒子模型-垂直方向的布局
                默认情况下父元素的高度被内容撑开
                子元素是在父元素的内容区中排列的
                    如果子元素的大小超过了父元素，则子元素会从父元素中溢出
                    使用overflow属性来设置父元素如何处理溢出的子元素(css的属性，要设置在父元素上)
                    可选值：
                        visible,默认值，子元素会从父元素中溢出，在父元素外部的位置显示
                        hidden,隐藏值，溢出的内容将会被裁剪不会显示
                        scroll,滚动条，生成两个滚动条，通过滚动条来查看完整的内容
                        auto,滚动条，根据需要生成滚动条
                    拓展：overflow-x;处理水品方向的内容
                          overflow-y,处理垂直方向的内容
    示例：<div style="width:100px;height:100px;"><p style="overflow:auto;height:400px;">aaaaaaaaaaaa</p></div>
            
            ⑥盒子模型-外边距的折叠
                垂直外边距的重叠(折叠)
                    ━相邻的垂直方向外边距会发生重叠现象
                    ━兄弟元素
                        ━兄弟元素间的相邻垂直外边距会取两者之间的较大值(两者都是正值)
                        ━特殊情况：
                            如果相邻的外边距一正一负，则取两者的和
                            如果相邻的外边距都是负值，则取两者中绝对值较大的
                        ━兄弟元素之间外边距的重叠，对于开发是有利的，所以我们不需要进行处理
                    ━父子元素
                        ━父子元素间相邻外边距，子元素的会传递给父元素(上外边距)
                        ━父子外边距的折叠会影响到页面的布局，必须要进行处理
                    解决方案：1：增加内边距padding，调整页面高度使页面样式保持不变
                              2：增加边框border来隔开两个元素的外边距，但是需要进行调整父子元素的样式
    示例：
    
            ⑦盒子模型-行内元素
                行内元素的盒子模型
                    ━行内元素不支持设置宽度和高度
                    ━行内元素可以设置padding，但是垂直方向的padding不会影响页面的布局
                    ━行内元素可以设置border，垂直方向的border不会影响页面的布局
                    ━行内元素可以设置margin，垂直方向的margin不会影响页面布局
                新属性：display(中文意思：显示) 用来设置元素显示的类型(是css的属性，写在CSS中)
                           可选值：
                               inline 将元素设置为行内元素
                               block将元素设置为块元素
                               inline-block 将元素设置为行内块元素
                                     行内块，即可以设置宽度和高度，又不会独占一行
                               table  将元素设置为一个表格
                               none  元素不在页面中显示
                        visibility  用来设置元素的显示状态
                            可选值：
                                 visible  默认值，元素在页面中正常显示
                                 hidden  隐藏值， 元素在页面中隐藏，不显示，但是依然占据页面的位置     
    示例：<span style="display:block;">我我</span>
    
            ⑧浏览器的默认样式
    概念━默认样式：
        ━通常情况下，浏览器都会为元素设置一些默认样式
        ━默认样式的存在会影响到页面的布局，
            通常情况下编写网页时必须要去除浏览器的默认样式(pc端的页面)
    消除方法：
        <body style="margin:0;">
        <p style="margin:0;">
        <ul style="margin:0;padding:0;">
    最简单做法：
        <style>*{margin:0;padding:0;}</style>
    新语法：list-style:none 去除项目符号
    示例：<ul style="list-style:none;">
            ⑨盒子模型-拓展
    1、要让一个文字在父元素中垂直居中，只需将父元素的line-height设置为一个和父元素父元素height一样的值
    2、去除下划线:text-decoration(文本修饰)：text-decoration:none;
    3、文字加粗:font-weight:bold;
    5、设置方形的项目符号:list-style:square;
    4、新属性：line-height  text-decoration  font-weight
    
六、盒子模型2
    ①盒子的大小
          默认情况下，盒子可见框的大小由内容区、内边距和边框共同决定
    新属性:box-sizing  用来设置盒子尺寸的计算方式(设置width和height的作用)
          可选值：
               content-box  默认值，宽度和高度用来设置内容区的大小
               border-box   宽度和高度用来设置整个盒子的可见宽大小
                   width和height指 内容区 和 内边距 和 边框 的总大小
    示例：<div style="box-sizing:border-box;">
    ②轮廓阴影和圆角
          1、阴影和轮廓
    新属性:outline  用来设置元素的轮廓线，用法和border一模一样
              轮廓和边框不同的点，就是轮廓不会影响到可见框的大小
    示例：<div style="online:10px solid red;">
           box-shadow  用来设置元素的阴影效果，阴影不会影响页面布局
              第一个值  水平偏移量  设置阴影的水平位置  正值向右移动  负值向左移动
              第二个值  垂直偏移量  设置阴影的垂直位置  正值向下移动  负值向上移动
              第三个值  阴影的模糊半径
              第三个值  阴影的颜色  设置阴影的颜色
    示例：<div style="box-shadow:10px 10px 20px rbga(0,0,0,.5);">
          text-shadow  设置文字阴影
          2、圆角
    新属性:border-radius  用来设置圆角 圆角设置的圆的半径大小   单独设置：border-top-left-radius设置左上……以此类推
    border-radius可以设置四个角的圆角
        四个值  左上 右上 右下 左下
        三个值  左上 右上/左下 右下
        两个值  左上/右下 右上/左下
        一个值  左上/右下/右上/左下
    将元素设置为圆形:border-radius:50%;
    设置两边圆角不同半径:border-radius:10px/20px;
    
七、浮动
    1、浮动的简介
    通过浮动可以使一个元素向其父元素的左侧或右侧移动  
        使用float 属性来设置元素的浮动   
            可选值：
                none 默认值，元素不浮动
                left   元素向左浮动
                right  元素向右浮动
        注意：元素设置浮动以后，水品布局的等式便不需要强制成立
              元素设置浮动以后，会完全从文档流中脱离，不在占用文档流的位置
                  所以元素下边的还在文档流中的元素会自动向上移动
        浮动的特点：
            1、浮动元素会完全脱离文档流，不再占据文档流中的位置
            2、设置浮动后元素会向父元素的左侧或右侧移动
            3、浮动元素默认不会从父元素中移出
            4、浮动元素向左或向右移动时，不会超过它前边的其他浮动元素
            5、如果浮动元素的上边是一个没有浮动的块元素，则浮动元素无法上移
            6、浮动元素不会超过它上边的浮动的兄弟元素，最多就是和它一样高
        简单总结：
            浮动目前来讲它的主要作用就是让页面中的元素可以水平排列
                通过浮动可以制作一些水平方向的布局
    示例：<style>div{float:right;}<style>
    2、浮动的特点
           1、浮动元素不会盖住文字，文字会自动环绕在浮动元素的周围
               所以我们可以利用浮动来设置文字环绕图片的效果
           2、元素设置浮动后，将会从文档流中脱离，从文档流中脱离后，元素的一些性质也会发生变化
       脱离文档流的特点：
           块元素：
               1、块元素不在独占页面的一行
               2、脱离文档流以后，块元素的高度和宽度默认都被内容撑开
           行内元素：
               行内元素脱离文档流以后会变成块元素，特点和块元素一样
           脱离文档流以后，不需要再区分块和行内元素了
    3、问题
            高度塌陷的问题
                在浮动的布局中，父元素的高度默认是被子元素撑开的，
                    当子元素浮动后，其会完全脱离文档流，子元素从文档流中脱离
                    将会无法撑起父元素的高度，导致父元素的高度丢失
                父元素高度丢失以后，其下的元素会自动上移，导致页面布局混乱
                所以高度塌陷是浮动布局中一个常见的问题，而且这个问题我们必须要进行处理！
            BFC(Block Formatting Context) 块级格式化环境
             ━BFC是一个CSS中的一个隐含的属性，可以为一个元素开启BFC
                 开启BFC该元素后变成一个独立的布局区域
             ━元素开启BFC后的特点：
                 1.开启BFC的元素不会被浮动元素所覆盖
                 2.开启BFC的元素子元素和父元素的外边距不会重叠
                 3.开启BFC的元素可以包含浮动的子元素
             ━可以通过一些特殊方式来开启元素的BFC：
                 1、设置元素的浮动(不推荐)
    示例：<div style="float:left;background-color:yellow;"><div style="background-color:red;"></div></div>
                 2、将元素设置为行内块元素(不推荐)
    示例：<div style="display:inline-block;"><div style="background-color:red;"></div></div>
                 3、将元素的overflow设置为一个非visible的值
                    ━常用的方式  为元素设置overflow:hidden; 开启其BFC  以使其可以包含浮动元素
    示例：<div style="overflow:hidden;"></div>
    4、clear属性
        如果我们不希望某个元素因为其他元素浮动的影响而改变位置
            可以可以通过clear属性来清除浮动元素对当前元素所产生的影响
        clear
           -作用:清除浮动元素对当前元素所产生的影响
           -可选值:
              left  清除左侧浮动元素对当前元素的影响
              right 清除右侧浮动元素对当前元素的影响
              both 清除两侧中最大影响的那侧
           原理:
               设置清除浮动以后，浏览器会自动为元素添加一个上外边距，
                   以使其不受其他元素的影响
    示例：<style>div{clear:left;}</style><div></div>
    5、高度塌陷最终解决方案
示例：div:after{
content:'';display:block;clear:both;
}
    6、clearfix
    clearfix这个样式可以同时解决高度塌陷和外边距重叠的问题，当你在遇到这些问题时，直接使用clearfix这个类即可
    示例：.clearfix::before,.clearfix::after{
    content'';display:table;clear:both;
    }
    
八、定位(position)
    - 定位是一种更加高级的布局手段
    - 通过定位可以将元素摆放到页面的任意位置
    - 使用position属性来设置定位
        可选值：
          static  默认值，元素是静止的没有开启定位
          relative 开启元素的相对定位
          absolute 开启元素的绝对定位
          fixed  开启元素的固定定位
          sticky 开启元素的粘滞定位
    1、相对定位
        - 当元素position属性值设置为relative时则开启了元素的相对定位
        - 相对定位的特点：
            1.元素开启相对定位以后，如果不设置偏移量元素不会发生任何的变化
            2.相对定位是参照于元素在文档流中的位置进行定位的
            3.相对定位会提升元素的层级
            4.相对定位不会使元素脱离文档流
            5.相对定位不会改变元素的性质，块还是块，行内还是行内
        - 偏移量(offset)
            - 当元素开启了定位以后，可以通过偏移量来设置元素的位置
              top 定位元素和定位位置上边的距离          
              bottom 定位元素和定位位置下边的距离
              - 定位元素垂直方向的位置由top和bottom两个属性来控制
                   通常情况下我们只会使用其中之一
                top值越大，定位元素越向下移动，bottom值越大，定位元素越向下移动
              right 定位元素和定位位置左侧的距离
              left  定位元素和定位位置右侧的距离
              - 定位元素水平方向的位置由right和left两个属性来控制
                   通常情况下我们只会使用一个
                right值越大，定位元素越向左移动，left值越大，定位元素越向右移动
    示例：div{position:relative;top:100px;}
    2、绝对定位
    ━将元素的position属性值设置为absolute时，则开启了元素的绝对定位
    ━绝对定位的特点：
          1.开启绝对定位后，如果不设置偏移量元素的位置不会发生变化
          2.开启绝对定位后，元素后从文档流中脱离
          3.绝对定位会改变元素的性质，行内变成块，块的宽高被内容撑开
          4.绝对定位会使元素提升一个层级
          5.绝对定位是相对于其包含块进行定位的
    包含块(containing block)
        ━正常情况：
              包含块就是离当前元素最近的祖先块元素
        示例：<div><div></div></div>
        ━绝对定位的包含块：
            包含块就是离它最近的开启了定位的祖先元素
            如果所有的祖先元素都没有开启定位，则根元素就是它的包含块
        ━html(根元素、初始包含块)
    3、固定定位
       ━将元素的position属性设置为fixed则开启了元素的固定定位
       ━固定定位也是一种绝对定位，所以固定定位大部分特点都和和绝对定位一样
           唯一不同的是固定定位永远参照于浏览器的视口进行定位
           固定定位的元素不会随网页的滚动条滚动
       视口：就是浏览器的可视窗口
    示例：div{position:fixed;top:0;left:0;}
    4、粘滞定位
       ━当元素position属性设置为sticky时则开启了元素的粘滞定位
       ━粘滞定位和相对定位的特点基本一致，不同的是粘滞定位可以在元素到达某个位置时将其固定
    
    示例：div{position:sticky;top:0;}
    5、绝对定位元素的布局 
       ━当我们开启了绝对定位后：
           水品方向的布局等式就需要添加left和right两个值
             此时规则和之前一样，只是多添加了两个值：
                 当发生过度约束时：
                     如果九个值中没有auto，则自动调整right值以使等式满足
                     如果有auto，则自动调整auto的值以使等式满足
             ━可以设置auto的值：
                 margin width left right
             ━因为left和right的值默认是auto，所以如果不设置right和left
                 则等式不满足，会自动调整这两个值
        垂直方向布局的等式也必须要满足
            top+margin+padding+border+bottom=包含块高度 
    示例：div{top:0;bottom:0;left:0;right:0;margin:auto auto;}         
    6、元素的层级
    对于开启了定位的元素，可以通过z-index属性指定元素的层级
       z-index需要一个整数作为参数，值越大元素的层级越高
          元素的层级越高越优先显示
       如果元素的层级一样， 则优先显示靠下的元素
    祖先元素的层级再高也不会盖住后代元素
    
九、其他样式
    1、字体
    字体相关的样式
         color  设置字体颜色
         font-size 字体的大小
         font-family  字体组(字体格式)
         -指定字体的类别，浏览器会自动使用该类别下的字体
         可选值：
             serif   衬线字体
             sans-serif  非衬线字体
             monospace  等宽字体
             cursive  草书字体 
             fantasy  虚幻字体
             system-ui  未知字体
    -font-family可以同时指定多个字体，多个字体间使用,隔开
       字体生效时优先使用第一个，第一个无法使用则使用第二个 以此类推
    示例：font-family:'华文彩云';
    新属性：@font-face  可以将服务器中的字体直接提供给用户去使用
                问题：1.加载速度  2.版权  3.字体格式
         指定字体的名字
         font-family:'字体名字'
         服务器中字体的路径
         src: url('字体路径')
    2、行高
    行高
       行高指的是文字占有的实际高度
       可以通过line-height来设置行高
           行高可以直接指定一个大小
           行高也可以直接指定为一个整数
               如果是一个整数的话，行高会是字体font-size指定的倍数
            行高还经常用于设置文字的行间距
               行间距=行高-字体大小
    字体框
        字体框实际上就是字体存在的格子，设置font-size实际上就是设置字体框的高度
             行高会在字体框的上下均匀分配
        可以将行高设置为和高度一样的值，使单行文字在一个元素中垂直居中
    3、字体的简写属性
    font可以设置字体相关的所有属性
    语法：font:bold/italic bold/italic 字体大小/行高 字体族;
    行高 可以省略不写 如果不写会使用默认值
    font-weight   设置字重 字体的加粗
    可选值：  
          bold  加粗
          normal 正常
    100-900 9个级别(没什么用)
    示例：font-weight:bold;
    font-style   字体的风格
    可选值：
          normal 正常
          italic  斜体
    4、文本的样式
    text-align  文本的水品对齐
    可选值：
          left    左侧对齐
          right   右侧对齐
          center 居中对齐
          justify  两端对齐
    vertical-align  文本的垂直对齐
    可选值：
          baseline  基线对齐
          top      顶部对齐
          bottom  底部对齐
          middle  居中对齐
    5、其他的文本样式
    text-indent  设置文本缩进
    属性值：数字 + 单位(推荐em，表示1font-size)
    text-decoration  设置文本修饰
    可选值：
          none         默认值
          underline    下划线
          line-through  删除线
          overline      上划线
    示例：text-decoration:underline red dotted 5px;
    white-space  设置网页如何处理空白
    可选值：
          normal  默认值
          nowrap  不换行
          pre      保留空白
    text-overflow  文本如何处理多余的文本内容
    可选值：
          ellipsis  显示省略号
    cursor  光标类型
    可选值：
        default 默认值，通常是箭头
        pointer  小手效果，提示用户可以点击
        text  工字形，提示用户可以选中文字
        move  十字光标，提示用户可以移动
十、背景
    1、背景相关的属性
    background-color  设置背景颜色
    background-image  设置背景图片
         语法：background-image:url("图片路径");
    可以同时设置背景图片和背景颜色，这样背景颜色将会成为图片的背景色
        -如果背景图片小于元素，则背景图片会自动在元素中平铺将元素铺满
        -如果背景图片大于元素，将会有一部分背景无法完全显示
        -如果背景图片和元素一样大，则会直接正常显示
    background-repeat  设置背景的重复方式
        可选值：
              repeat  默认值 元素会沿着x轴和y轴双方向重叠
              repeat-x  沿着x轴方向重复
              repeat-y  沿着y轴方向重复
              norepeat  背景图片不重复
    background-position  用来设置背景图片的位置
    设置方式：
    通过top bottom right left center 来设置背景图片位置
            使用方位词时，必须要同时指定两个值，如果只写一个，则第二个默认是center
    通过偏移量来指定背景图片的位置
            水品方向的偏移量  垂直方向的偏移量
    示例：background-position:10px 10px;
    
    背景2
    background-clip  设置背景的范围
    可选值
    border-box   默认值，背景会出现在边框的下边
    padding-box  背景不会出现在边框，只会出现在内容区和内边距
    content-box  背景只会出现在内容区
    
    background-origin  背景图片的偏移量计算的原点
    可选值：
    padding-box  默认值 内边距
    content-box  内边距
    border-box   边框
    background-size  背景图片的大小
        第一个值是宽度
        第二个值是高度
        -cover  图片比例不变，将元素铺满
        -contain 图片比例不变，将图片在元素中完整显示
        如果只写一个值，则第二个值是auto
    background-attachment  背景图片是否跟随图片移动
    可选值
    scroll  滚动
    fix     不动
    
    2、渐变
        通过渐变可以设置一些复杂的背景颜色，可以从一个颜色向其他颜色过度的效果
            注意：渐变是图片，需要通过background-image来设置!!!
    ①线性渐变
    background-image:linear-gradient();  线性渐变
            颜色沿着一条直线发生变化
    语法：background-image:linear-gradient(渐变方向,渐变开始色 渐变颜色起始位置,渐变中间色 渐变色起始位置,... 渐变色起始位置,渐变结束色，渐变色起始位置);
    示例：<div style="background-image:linear-gradient(to left,red 10px,blue 10px,black 10px,yellow 10px);">Hellow World!</div>
    红色在开头，黄色在结尾，中间是过度区域
    -线性渐变的开头，我们可以指定一个渐变的方向
    可选值:
        to left
        to right
        to top
        to bottom
        XXXdeg  deg表示度数
        XXXturn  turn表示圈
    -渐变可以同时指定多个颜色，对个颜色默认情况下平均分布
         也可以手动指定渐变的分布情况
    background-image:repeating-linear-gradient()  可以平铺的线性渐变
    ②径向渐变
    radial-gradient()  径向渐变(放射性的效果)
        默认情况下径向渐变圆心的形状根据元素的形状来计算的
            正方形-->圆形
            长方形-->椭圆形
    语法：radial-gradient(大小 at 位置,颜色 位置,颜色 位置,...,)
    -我们也可以手动指定径向渐变的大小
      circle  圆形
      ellipse  椭圆形
    也可以指定特定的像素  
    radial-gradient(100px 100px,red,green)
    -也可以指定渐变的位置
       用at来指定位置
    radial-gradient(100px 100px at 10px 10px,red,green)
    
十一、表格
    新属性：
        border-spacing:指定边框之间的距离
        border-collapse:collapse设置边框的合并
        display:table-cell 将元素设置为单元格td
    注意：如果表格中没有使用tbody，那么浏览器会自动常见一个tbody，并将所有tr放进tbody中
              所以tr不是table的父元素
    默认情况下元素在td中是垂直居中的
        可以通过vertical-align来设置
    
十二、动画效果
    1、过渡
    transition:用于为样式设置过渡效果
        通过过度可以指定一个属性发生变化时的切换方式，
        通过过度可以创建一颗特别好的效果，提升用户的体验
    transition-property:指定要执行过度的属性
         多个属性间使用,隔开
         所有属性都需要则使用all关键字
         大部分属性都支持过渡效果，注意过渡时必须是要从一个有效值向另一个有效值进行过渡
    transition-duration:指定过渡效果执行的时间
        时间单位：s和ms    1s=1000ms
        也可以分别指定多个时间，使用,隔开
    transition-timing-function:过渡的时序函数
    指定过渡执行的方式
      可选值：
        ease  默认值，慢速开始，先加速，再减速
        linear  匀速运动
        ease-in 加速运动
        ease-out 减速运动
        ease-in-out  先加速，后减速
        cubic-bezier()来指定时序函数    在拓号内写入坐标
        steps()  分步执行过渡效果
                 可以设置一个第二个值
                 end  在时间结束时执行过渡
                 start，在时间开始时执行过渡
    transition-delay:过渡时间的延迟，等待一定时间后执行
    简写属性：transparent:属性 持续时间 延迟时间 时序函数
    第一个时间是持续时间，第二个是延迟时间，其他顺序无要求。
    示例：transparent:all 1ms;
    2、动画
    设置动画效果，必须要先设置一个关键帧，关键帧设置了动画执行的每一个步骤
    @keyframes 关键帧的名字{
    from(0%){动画结束位置}
    ...%{中间的位置}
    to(100%){动画结束位置}
    }
    animation-name:要对当前元素生效的关键帧的名字
    animation-duration:动画执行的时间
    animation-delay:动画的延时
    animation-iteration-count:动画执行的次数
      可选值：次数或infinite(无限次数)
    animation-direction:动画执行的方向
      可选值：
        normal  默认值，从from到to执行
        reverse 反方向执行
        alternate 从from到to执行， 重复执行动画时反向执行
        alternate-reverse  与alternate相反
        animation-play-state:动画执行的状态
      可选值：
        running 默认值
        paused  动画暂停
        animation-fill-mode:动画的填充模式
      可选值：
        none  默认值，动画回到原来位置
        forwards  动画执行完毕元素会停止在动画结束的位置
        backwards 动画延时时元素会处于开始位置
        both  具有所有效果
    简写属性：
       animation:(关键帧名字 执行时间 执行次数 动画延时时间 ...)
    4、变形
       变形是通过CSS来改变元素的形状或位置
       -变形不会影响页面的布局
       -变形用transform来设置元素变形的效果
    ①平移
      translateX()  沿着X轴平移
      translateY()  沿着Y轴平移
      translateZ()  沿着Z轴平移
        -平移元素时，百分比是相对于自身计算的
        -也可以写px等单位
    语法：transform:translateX() translateY() translateZ();
    Z轴平移
    Z轴平移，调整元素在Z轴的位置，正常情况下就是调整元素和人眼之间的距离，
        距离越大，元素离人越近
    Z轴平移属于立体效果(近大远小)，默认情况下网页是不支持透视，如果需要看见效果，
        必须要设置网页的视距
      perspective:设置当前网页的视距，需要设置在父元素上
    translate3D(x,y,z) 同时设置三个属性
    ②旋转
    通过旋转可以使元素沿着XYZ轴旋转指定的角度
      rotateX()
      rotateY()
      rotateZ()
      rotate3D(x,y,z)
    单位：deg(角度)或turn(圈)
    backface-visibility:是否显示元素的背面
    visible默认值，显示
    hidden 不显示
    练习拓展：
    opacity:设置元素的透明值  设置：0-1之间的值
    transform-style:设置变形的样式
      可选值：
          flot  2d效果
          preserve-3d  变形3D效果
    ③缩放
    对元素进行缩放
        scaleX()  水平方向的缩放
        scaleY()  垂直方向的缩放
        scale(x,y)   双方向的缩放
    缩放不会影响周围的元素
    补充：
        transform-origin:x y z:变形的原点
            默认值是正中间,就是：transform-origin:50% 50% 0;
    ④观察者位置
    perspective-origin:x y
        设置观察者的位置
    
    skew()
    向一个方向倾斜，第一个是x轴，第二个是y轴
    
十三、css变量
    css原生也支持变量的设置
    设置方法：
    html{
        --变量名:属性;
    }
    使用：
      background-color:var(--属性名);
      var(变量名,默认值)
      若变量未定义，则使用默认值
    CSS原生计算函数
      calc()
    
十四、flex(弹性盒、伸缩盒)
    - 是CSS中的一种排列手段，它主要用来代替浮动完成页面的布局
    - flex可以使元素具有弹性，让元素可以跟随页面的大小的改变而改变
    - 弹性容器
        - 要使用弹性盒，必须先将一个元素设置为弹性容器
        - 我们通过display来设置弹性容器
             display:flex 设置为块级弹性容器
             display:inline-flex 设置为行内的弹性容器
    - 弹性元素
        - 弹性容器的子元素是弹性元素(弹性项)
        - 弹性元素可以同时是弹性容器
    
1、弹性容器的样式
    flex-direction 指定容器中弹性元素的排列方式
     可选值：
         row 默认值，弹性元素在容器中水平排列(左向右)
              - 主轴自左向右
         row-reverse 弹性元素在容器中反向水平排列(右向左)
              - 主轴自右向左
         column 弹性元素纵向排列(自上向下)
              - 主轴自上向下
         column-reverse 弹性元素反向纵向排列(自下向上)
              - 主轴自下向上
    主轴:
        弹性元素的排列方向称为主轴
    侧轴:
        与主轴垂直方向的称为侧轴
    
    flex-wrap:
     设置弹性元素是否在弹性容器中自动换行
     可选值：
         nowrap 默认值，不会自动换行
         wrap   元素沿着辅轴方向自动换行
         warp-reverse 元素沿着辅轴反方向换行
    
    flex-flow: warp和direction的简写属性，可以同时指定两个属性，且没有顺序要求
    
    justify-content
         - 如何分配主轴上的空白空间(主轴上的元素如何排列)
         - 可选值：
             flex-start 元素沿着主轴起边排列
             flex-end   元素沿着主轴终边排列
             center     元素沿着主轴居中排列
             space-around 空白分布到元素两侧
             space-between 空白均匀分布到元素间
             space-evenly 空白分布到元素单侧
    
    align-items
        - 元素在辅轴上如何对齐
        - 元素间的关系
            - 可选值：
                stretch 默认值，将元素的长度设置为相同的值
                flex-start 元素不会拉伸，沿着辅轴起边对齐
                flex-end 沿着辅轴的终边对齐
                center 居中对齐
                baseline 基线对齐
    
    align-content:
        - 如何分配辅轴上的空白空间，可选值与justify-content相同
    
2、弹性元素的样式
    flex-grow 指定弹性元素的伸展的系数
    - 当父元素有多余的空间时，子元素如何伸展
    - 父元素的剩余空间，会按照比例进行分配
    
    flex-shrink 指定弹性元素的收缩系数
    - 当父元素中的空间不足以容纳所有的子元素时，如何对子元素进行收缩
    
    align-self: 用来覆盖当前弹性元素上的align-items
    flex-basis: 指定的是元素在主轴上的基础长度
                  如果主轴是横向的，则该值指定的就是元素的宽度
                  如果主轴是纵向的，则该值指定的就是元素的高度
                  - 默认值是auto，表示参考元素自身的高度或宽度
                  - 如果传递了具体的值，则以该值为准
    flex: 可以设置弹性元素所有的三个样式
         flex:增长 缩减 基础;
         默认值：initial  其他可选值：auto none
    order 决定弹性元素的排列顺序
      order越大就越靠前
    设置最佳视口：<meta name="viewport" content="width=device-width,initial-scale=1.0">，移动端必须要的东西
    
十五、媒体查询
    语法：@media 查询规则{}
        媒体类型：
            all  所有样式
            print  打印设备
            screen  带屏幕的设备
            speech  屏幕阅读器
        可以使用,连接多个媒体类型
            可以在媒体类型前添加only，表示只有，only使用主要为了兼容老版本浏览器
    示例：@media only screen,print{body{background-color:green}}
        媒体特性：
            width  视口宽度
            height  视口高度
            min-width  视口最小宽度
            max-width  视口最大宽度
    示例：@media (min-width:500px),(max-width:600px){
        body{background-color:red}
    }
    
    
    
    
    
    
    
